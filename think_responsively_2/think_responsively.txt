Starting to think responsively

MODULE WRAP UP
FLEXBOX
    Justify-content & align-items
        position things on the page
    Flex-direction (column/row)
        switching the main axis (takes the justify-content/align-items and work the other way)
    Media queries
    How to build (and style) a navigation.
    

The focus on this module:
- Making responsive websites
- CSS units
- Flexbox basics
- Media queries
- How to approach a layout
###

CSS units

There are many different types of CSS unit that we can use:

Absolute units
    pixels
    cm, pt, in, mm, etc
Relative units
    relative to font-size
        em
        rem
        ch
        ex
    relative to viewport (browser window)
        vh
        vw
        vmin
        vmax
    percentage (relative to its parent!)


CSS UNITS - PERCENTAGES

Percentages, when set on the width (which is where we'll be using them the most), are always calculated as a percentage of their parent's width.

This might seem to complicate matters, but once you get used to it, it's much easier to set up our layouts and, 
when dealing with responsive layouts, it's an essential unit to understand.
###

CONTROLING THE WIDTH OF IMAGES

We can fix our image by giving it a width, and to make it match the size of our container, we can give it's width a 
value using percentage so that matches the size of the container at all times!

set the width to img { width: 100%}, REMEMBER that its not .img but just img and x% of its parent!!
###

MIN-WIDTH AND MAX-WIDTH

When starting to think responsively, setting a max-width on an element can be very useful. Often we want a layout to 
be able to shrink down very small, but we want to limit the maximum size of elements to prevent line-lengths from 
getting to long and the layout from becoming awkward.

The properties
Both of these will prevent an element from either getting bigger or smaller than the sizes given, despite whatever might be set on the width property.

    min-width - the minimum possible size an element can be
    max-width - the maximum possible size an element can be

 for exampel:
    width: 90%;
    max-width: 620px;

###

CSS UNITS - THE EM UNIT (Relative unit = relative to the font-size of the parent)

The em unit in CSS, when we are declaring a font-size, is always relative to the font-size of the parent.

So, if I have an element with a font-size: 2em, and the parent has font-size: 10px, my element will have a 
font-size that is equal to 20px, as it will be 2 x 10.

Because most elements inherit their font-size, if we set all font-sizes with em, and then change the font-size 
on the body, it will change the entire site in one quick step, which can be very useful!

1em means inherit the font-size of the parent. (its relative to its parent)
    1em = 100% of parents font-size
    1.5em = 150% of parents font-size
###

THE PROBLEM WITH EMs 

Because ems are relative to their parent, if their parent also have a font-size set in em it can cause this cascading 
effect where font-sizes get out of control huge, and an h2 in one place might be half the size of an h2 somewhere else, 
which is rarely what you'd actually want to happen.
###

CSS UNITS - REMs (solution to ems!!)

The rem unit is short for Root em because it is always relative to the font-size of the ROOT of our page.

In an HTML document, THE ROOT IS ALWAYS OUR HTML ELEMENT. So when we use rems we can keep the nice scaling for font-sizes like we saw with em, 
but because it is always relative to one single elment, there is no risk of cascading font-sizes that go out of control.
###

PICKING WHICH UNIT TO USE

My general rule of thumb:

    font-sizes = rem            (font-size: 1.5rem;)
    padding and margin = em     (padding: .5em 1.25em; /* em is relative to the font-size of this element */)
    widths = px or em or %

For width, percentage is very common, whereas either pixels or em work well for set sizes, like when setting a min-width or max-width. If you stick with pixels here, you'll be fine :)

            h1 {
                font-size: 3rem;        (parent)
                margin-bottom: .5em;    (half the size of the parent)
            }
###

VIDEO 11 - 13

FLEXBOX REFRESHER AND SETTING UP SOME HTML 

A quick refresher on how display: flex works, and an analysis of a layout.  

elements normally have a    display:block or display:inline     as a default from the browser

display:block
    divs, header, footer, main, h1-h6, p, lists

display:inline  
    a, strong, em and span

display:flex (see the img display-flex.PNG)
###

BASIC STYLES AND SETTING UP THE COLUMNS

Remember, to create columns, on the parent, in this case     

<div class="columns"> 
we want to declare      display: flex. 

This turns the children into flex-items, which instead of stacking on top of each other will suddenly become columns, going one next to the other.
###

ADDING THE BACKGROUND COLOR

By using a modifier class, we can keep all the properties that our individual columns have, but change their background-color as well, 
very similar to how we created our different button classes a little while ago.
###

SETTING THE COLUMN WIDTHS 

When setting up columns, in general PERCENTAGE is the best type of unit to use, as it makes it very easy to device a layout up.
###

SPACING OUT THE COLUMNS - JUSTIFY CONTENT

A look at the justify-content property, which works with display: flex to distribute content along the main axis (horizontally at the moment).

Remember: the property (justify-content: ;) is set on the parent!!!

The different values: 

    justify-content: space-between 
            will redistribute any extra space in between all the elements, leaving the left-most element to the left, and the right-most 
            element all the way to the right.
    
    justify-content: space-around 
            will redistribute extra space around each element, giving them all an equal amount - justify-content: space-between
    
    justify-content: space-evenly 
            is very similar to space-around, but the spacing is more visually balanced.
###

CONTROLING THE VERTICAL POSITION OF FLEX ITEMS 

The     align-items     property, by default, controls the vertical positioning of flex-items within their parent. In reality, 
it's working on the "cross axis", but we'll explore what that means more in a future video.

align-items values:
    flex-start -    aligns all the items to the "start" of the parent (normally the top)
    center -        vertically centers the flex-items inside the parent
    flex-end -      aligns all the items to the "end" of the parent (the bottom)
    baseline -      aligns the baseline of the first line of text in all the flex-items. It won't be noticeable if all font sizes are the same.
###

MEDIA QUERY BASICS 

Media queries let us target differnt media types, as well as specific conditions within those types in our CSS.

Basic syntax:
    @media [media type] ([media condition]) { ... }
    
Media types:
    screen      @media screen{...}
    print       @media print{...}
    speech      @media speech{...}

Media condtion (lets us target specific conditions within the media type):
    widths              @media(min-width: 600px) {...}
    orientation         @media(orientation: landscape) {...}
    specific features   @media(hover) {...}

An example
In this below example, the background of the body will only be red when using a device that has a screen, and which has a width of 600px or bigger.

    @media screen and (min-width: 600px) {
        body {
            background: red;
        }
    }

More information on media queries
The MDN page Using Media Queries takes a much deeper look into them if you're the type of person who likes to dive in on subjects like this :)
https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries

###

MAKING OUT LAYOUT RESPONSIVE WITH FLEX-DIRECTION

By changing the flex-direction of our parent inside a media query, plus a little bit more CSS, we can get our layout working on all screen sizes really easily!
###

FLEX-DIRECTION EXPLAINED

flex-direction 
    works by switching the main axis, which is a bit strange as it means that justify-content switches from controlling 
    content horizontally to vertically, and align-items switches from the vertical to horizontal.

Why this happens
    justify-content 
        controls content on the main axis of a flex container. So when we set flex-direction: column, 
        we are changing the main axis from being horizontal to vertical instead.

Similarly, align-items 
        controls items along the cross axis, which gets switched from the vertical axis to the horizontal axis.
###

CREATING A NAVIGATION

Navigations are traditionally set up using an unordered list. This does lead to having to write extra CSS, 
and there is some debate in the community currently going on about whether this is really the best way to still be working... 
but with that said, using a ul is the most common way it's done, so we're going to take a look at doing it that way.

If ever you want to create a navigation that does away with the ul, if you can do it this way, you'll have no problems at all as it's a lot simpler.
